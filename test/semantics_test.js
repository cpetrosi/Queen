const assert = require('assert');
const parse = require('../parser');

describe('QUEEN SEMANTIC ANALYZER', () => {
  it('ðŸ‘‘ string helloWorld ðŸš€ ðŸ–¨ "Hello World!"', () => {
    const func = () => {
      parse('ðŸ‘‘ string helloWorld ðŸš€ ðŸ–¨ "Hello World!"').analyze();
    };
    assert.doesNotThrow(func);
  });
  it('ðŸ‘‘ string helloWorld ðŸš€ ðŸ–¨ H', () => {
    const func = () => {
      parse('ðŸ‘‘ string helloWorld ðŸš€ ðŸ–¨ H').analyze();
    };
    assert.throws(func, Error, 'UNDECLARED VARIABLE: H has not been declared.');
  });
  it('ðŸ‘‘ int n ðŸš€ 1 + 1', () => {
    const func = () => {
      parse('ðŸ‘‘ int n ðŸš€ 1 + 1').analyze();
    };
    parse('ðŸ‘‘ int n ðŸš€ 1 + 1').analyze();
    assert.doesNotThrow(func);
  });
  it('ðŸ‘‘ int n ðŸš€ let s ðŸš€ 5 in 1 + s', () => {
    const func = () => {
      parse('ðŸ‘‘ int n ðŸš€ let s ðŸš€ 5 in 1 + s').analyze();
    };
    parse('ðŸ‘‘ int n ðŸš€ let s ðŸš€ 5 in 1 + s').analyze();
    assert.doesNotThrow(func);
  });
  it('ðŸ‘‘ int n ðŸš€ let s ðŸš€ "s" in 1 + s', () => {
    const func = () => {
      parse('ðŸ‘‘ int n ðŸš€ let s ðŸš€ "s" in 1 + s').analyze();
    };
    assert.throws(func, Error, 'TYPE ERROR: s must be numeric.');
  });

  it('ðŸ‘‘ int * int tup ðŸš€ [6] @ [9]', () => {
    const func = () => {
      parse('ðŸ‘‘ int * int tup ðŸš€ [6] @ [9]').analyze();
    };
    parse('ðŸ‘‘ int * int tup ðŸš€ [6] @ [9]').analyze();
    assert.doesNotThrow(func);
  });
  it('ðŸ‘‘ int * int tup ðŸš€ ["s"] @ [9]', () => {
    const func = () => {
      parse('ðŸ‘‘ int * int tup ðŸš€ ["s"] @ [9]').analyze();
    };
    assert.throws(func, Error, 'TYPE ERROR: Both lists must contain elements of the same type.');
  });
});
